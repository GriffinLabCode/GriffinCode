%% swr extraction
% this code is designed to extract sharp-wave ripples. Note that SWR
% extraction does not guarantee that what you're analyzing are true SWR
% events. User should examine data.
%
% specific details: ripples are included if their duration is greater than
%                    15 ms. Exclusion of ripples occurs if duration is less
%                    than 15ms or if two ripples are < 1 second apart.
%                    (Jadhav et al., 2016 - "coordinated excitation and
%                    inhibition...")
%
% -- INPUTS -- %
% lfp:            vector of raw lfp values
% mazeLoc:        An index that tells the function which maze locations to
%                 look at. So mazeLoc = [1 5] would tell the function to
%                 look at lfp from stem entry to t-junction entry
% Int:            Int file with all trials that you are interested in
%                 looking at.
% Timestamps:     Vector of timestamps
% srate:          samples/second
% phase_bandpass: [150 250] or whatever you choose
% gauss:          1 if smooth hilbert transformed data with gaussian, 0
%                  otherwise
% plotFig:        1 if you want to plot out individual steps, 0 otherwise
% std_above_mean: how many standard deviations above the mean? This is how
%                   you extract ripples. Anywhere from 3 to 6 is used in
%                   literature
% InterRippleInterval: time (in sec) where if a ripple occurs within this
%                       time window, following another ripple, it is
%                       removed. See Jadhav et al., 2016. This is relevant
%                       for instances where you want to extract spiking
%                       data around ripples or something.
%
% -- OUTPUTS -- %
% SWRcount:     variable indicating total number of SWR events
% SWRdurations: variable indicating the length of each ripple event
% SWRtimes:     timestamps of swr
% SWRtimeIdx:   Index of swr timestamps
%
% written by John Stout

function [SWRcount,SWRdurations,SWRtimes,SWRtimeIdx] = extract_SWR_2(lfp,mazeLoc,Int,Timestamps,srate,phase_bandpass,std_above_mean,gauss,InterRippleInterval,plotFig)

%% create a divisor based on sampling rate

% create a divisor to convert to sec or ms
divisor = srate*(1/1000); % first convert to ms

%% loop across trials and filter/transform data

% get filtered and transformed data across entire session for purposes of
% defining an average
lfp_filteredAll = skaggs_filter_var(lfp,phase_bandpass(1),phase_bandpass(2),srate);
lfp_hilbertAll  = abs(hilbert(lfp_filteredAll));    

%% smooth with gaussian
if gauss == 1

    % generate gaussian - 32ms width and 4ms std (Frank and jadhav papers)
    samplesPerMS  = (srate/1000); % number of samples (N) per ms (N/ms)
    gauss_width   = floor(samplesPerMS*32); % 32ms * N samples/ms = 32*N samples = M samples
    target_std_ms = 4; % target std in ms
    target_std_pt = floor(target_std_ms*samplesPerMS); % target std in samples -> std (in ms) * (N samples / ms) 
    
    stdev = (N-1)/(2*alpha);
    
    alp
    
    alpha = gauss_width/(target_std_pt*2); % 64/16 = 4.
    
    % automatically get 4ms standard deviation   
    w = gausswin(gauss_width,alpha);   
    
    %{
    % gaussian plot - check what it looks like
    gauss_time = linspace(0,32,gauss_width);
    figure(); plot(gauss_time,w); xlabel('ms'); 
    %}
    
    % smooth for all
    lfp_smoothAll = conv(lfp_hilbertAll,w,'same');

    % define variable to use regardless of inputs
    lfpDataFormat = lfp_smoothAll;

elseif gauss == 0
    
   lfpDataFormat = lfp_hilbertAll;
   
end

%% extract sharp wave ripples

% z-score data so that elements reflect sd from the mean
zSmoothedAll = zscore(lfpDataFormat);

% now get data from a specific maze location using the int file
%mazeLoc = [2 7];
numTrials = length(Int);
for triali = 1:numTrials
    
    % zscored, transformed, smoothed data for extracting ripples
    zSmooth_data{triali} = zSmoothedAll(Timestamps > Int(triali,mazeLoc(1)) & Timestamps < Int(triali,mazeLoc(2)));
    
    % timestmaps for extracting ripple
    LFPtimes{triali}     = Timestamps(Timestamps > Int(triali,mazeLoc(1)) & Timestamps < Int(triali,mazeLoc(2)));
    
    % index of lfp timestamps for extracting ripple
    LFPidx{triali}       = find(Timestamps > Int(triali,mazeLoc(1)) & Timestamps < Int(triali,mazeLoc(2)));

    % use RunLength function. Possible_swrs indicates the start and end of 
    % periods where the std is greater than the user define threshold.
    [~, ~, possible_swrs{triali}] = RunLength(zSmooth_data{triali} >= std_above_mean);

    % if the possible_swrs{triali} cell is empty, and its the first loop,
    % you may get an error. so we add an if statement
    if isempty(possible_swrs{triali})==1 % if there WERE ripples, do the following...
        continue
    end
        
    % sometimes, the first value may not reach threshold. Therefore account
    % for those instances.
    if zSmooth_data{triali}(possible_swrs{triali}(1)) < std_above_mean
        possible_swrs{triali}(1) = []; % for some reason this is "1" despite it not being important
    end

    % if this array is now empty, skip
    if isempty(possible_swrs{triali})==1
        continue
    end

    % sometimes, the final value will reach threshold with no end point in
    % sight, we need to erase these cases. Note that
    % possible_swrs{triali}(end) SHOULD NOT be > std_above_mean. In fact
    % possible_swrs{triali}(end), and possible_swrs{triali}(2:2:length(possible_swrs{triali}))
    % should not reach threshold. The index accounts for the onset of the
    % ripple to one element beyond the end of the ripple. Therefore, 
    % possible_swrs{triali}(end-1) should ALWAYS reach threshold. The same
    % is true for
    % possible_swrs{triali}(2:2:length(possible_swrs{triali}))-1. The '-1'
    % allows us to get the potential SWR offset.
    if zSmooth_data{triali}(possible_swrs{triali}(end)) > std_above_mean && zSmooth_data{triali}(possible_swrs{triali}(end-1)) < std_above_mean
        possible_swrs{triali}(end) = []; % for some reason this is "1" despite it not being important
    end    

    % get start of potential ripples
    startPos = [];
    startPos = possible_swrs{triali}(1:2:length(possible_swrs{triali}));

    % get end of potential ripple. % must subtract 1, the possible_swrs var 
    % indicates the start of swr and 1 after the end of swr
    endPos = [];
    endPos = possible_swrs{triali}(2:2:length(possible_swrs{triali}))-1; 

    % sanity check - make sure that startPos and endPos are above set
    % std_above_mean
    check1 = []; check2 = [];
    check1 = find(zSmooth_data{triali}(startPos) < std_above_mean);
    check2 = find(zSmooth_data{triali}(endPos) < std_above_mean);

    % if either are not empty, something is wrong
    if isempty(check1)==0 || isempty(check2)==0
        disp('Fatal error in extracting SWRs. Some were below set threshold')
        return
    end

    % concatenate data
    idxRippleTimes{triali} = horzcat(startPos',endPos');

    % find any instances where the potential ripple does not meet the
    % duration requirements and exlude the potential ripple
    ripDuration{triali} = idxRippleTimes{triali}(:,2) - idxRippleTimes{triali}(:,1);

    % exlude events that lasted less than 15ms
    notLongEnough = [];
    notLongEnough = find(ripDuration{triali} < 15*divisor);

    % remove
    idxRippleTimes{triali}(notLongEnough,:)=[];
    ripDuration{triali}(notLongEnough,:)=[];
 
end

% remove trials with no events
idxRem                 = cellfun('isempty',idxRippleTimes);
idxRippleTimes(idxRem) = [];
zSmooth_data(idxRem)   = [];
LFPtimes(idxRem)       = [];
ripDuration(idxRem)    = [];
LFPidx(idxRem)         = [];

% update number of trials if any were removed
numTrials = length(idxRippleTimes);

% extract lfp data surrounding the defined ripple events
% ISSUE: sometimes the swr_events that are suppose to be above 3stds,
% we're getting less than 3
for triali = 1:numTrials
    
    % find lfp data for each ripple
    numRipples{triali} = size(idxRippleTimes{triali},1);
    
    % loop across each ripple within each trial
    for j = 1:numRipples{triali}
        % get zscored smoothed/transformed data from ripple onset to ripple
        % offset
        swr_events{triali}{j}      = zSmooth_data{triali}(idxRippleTimes{triali}(j,1):idxRippleTimes{triali}(j,2));
        % index of ripple onset to offset
        swr_event_index{triali}{j} = LFPidx{triali}(idxRippleTimes{triali}(j,1):idxRippleTimes{triali}(j,2));
        % get timestamps within the events
        swr_timestamp{triali}{j}   = LFPtimes{triali}(idxRippleTimes{triali}(j,1):idxRippleTimes{triali}(j,2));
    end
end

% sanity check 2. We should be able to index back to the z-scored data, and
% that data should be the exact same size and be identical in value. If so,
% we can use swr_event_index to index any lfp or timestamp from the OG
% data.
check3 = zSmoothedAll(swr_event_index{1}{1});
check4 = swr_events{1}{1};
diffChecks = check4-check3; % this entire vector should be zero
if isempty(find(diffChecks ~= 0))==0 % if this is not empty, it means that our swr index does not index back to lfp and timestamps
    disp('Error - cannot use swr_event_index to index back to lfp and timestamps full vectors')
end

% remove trials with no events
swr_events      = swr_events(~cellfun('isempty',swr_events));
swr_event_index = swr_event_index(~cellfun('isempty',swr_event_index));
swr_timestamp   = swr_timestamp(~cellfun('isempty',swr_timestamp));
%SWRtrial        = swr_events; % save this before modifying the swr_events var

% concatenate data
swr_events      = horzcat(swr_events{:});
swr_event_index = horzcat(swr_event_index{:});
swr_timestamp   = horzcat(swr_timestamp{:});

% sanity check 3 - make sure there are no instances where std is less than
% what the user set it as
for swri = 1:length(swr_events)
    if isempty(find(swr_events{swri} < std_above_mean))==0
        disp('*BUG ALERT* - swr event dipped below defined threshold')
    end
end

% don't include swr events if two events are less than 1 sec apart (Jadhav
% et al., 2016). This is mostly for looking at single unit data around the
% ripple events
if InterRippleInterval > 0
    swrCount = length(swr_events);
    next = 0; % defined for while loop
    while next == 0
        for i = 1:swrCount-1

            % find cases where swrs are < 1 sec apart
            timeOffset = (swr_timestamp{i+1}(1)-swr_timestamp{i}(1))/1e6;

            % remove those instances when you find them
            if timeOffset < InterRippleInterval && timeOffset > 0

                % remove data
                swr_events(i+1)      = []; % remove data
                swr_timestamp(i+1)   = [];
                swr_event_index(i+1) = []; 

                % redefine swrCount
                swrCount = length(swr_events);

                % must break out of for loop, then redefine loop
                break

            end

            % time offset should never be a negative integer. If it is, something
            % is wrong.
            if timeOffset < 0
                disp('Error with time indexing')
                break
            end 

            if i == swrCount-1
                next = 1;
            end
        end
    end
end

% sanity check 4 - another check on duration
%"if the value of (length(swr_events{x})) is <30 then =[]"
SWRlens     = cellfun(@length,swr_events);
SWRtooshort = find(SWRlens < 15*divisor);

% remove cases of less than 30 samples (15 ms)
swr_events(SWRtooshort)      = [];
swr_event_index(SWRtooshort) = [];
swr_timestamp(SWRtooshort)   = []; 

%% generate outputs

% this may be redundant, can consolidate later
SWRcount     = length(swr_event_index);
SWRdurations = cellfun(@length,swr_timestamp)./divisor; % divide by divisor for ms (N samples * (1 ms / M samples ))
SWRtimes     = swr_timestamp;
SWRtimeIdx   = swr_event_index;

end