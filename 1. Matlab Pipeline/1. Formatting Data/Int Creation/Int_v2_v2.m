%% Int_v2
% I wrote this code to replace the existing method for creation of the Int
% file. This is for two reasons:
%   1) In rare circumstances, particularly after we moved to new rooms, we
%   began experiencing duplication errors in the old Int creation method. 
%   2) Importantly, the old Int file was not intuitive, and the code that
%   created it was also not intuitive. The code here is designed with
%   comments to facilitate the learning of its creation for better
%   troubleshooting. Moreover, there are two Int file outputs here, the
%   first is the old Int file which most of our existing code works with.
%   But the second is a newer int file in the form of a table that clearly
%   specifies which column corresponds to which maze location. 
%
% NOTE: This only works with T-maze tasks
%
% -- INPUTS -- %
% datafolder: the directory housing your data
%
% missing_data: How to handle tracking errors. Do 'exclude'.
%
% vt_name: video tracking data name, should be 'VT1.mat'
%
% taskType: the type of T-maze task you are using. For example, you could
%           enter 'DA' or 'DNMP'. 
%               ****** IMPORTANT ******
%               if running CA and there is no startbox, then type 'CA'.
%               However, if you are running CA with a startbox, enter 'DA'
%
% Int_information: This is a file that is generated by running
%                   'view_VT_data'. This file contains maze parameters,
%                   like where the startbox, stem, and choice point are
% 
% -- OUTPUTS -- %
% Int_old: the old formatted file. Each element is a time-stamp recorded
%           from the video camera, and each pixel was assigned a time-stamp
%           by cheetah. Therefore, the timestamps are arbitrary to cheetah
%           time of your machine
%               col1: stem entry
%               col5: cp entry
%               col6: cp exit (goal arm entry)
%               col2: goal zone entry (goal arm exit)
%               col7: goal zone exit (return arm entry)
%               col8: startbox entry (return arm exit)
%               col3: trajectory, 0 is left, 1 is right. May need to check
%                      this as sometimes cameras flip the maze orientation
%               col4: choice accuracy, 0 is correct, 1 is incorrect
%
% Int_new: a table formatted with columns that tell you what each timestamp
%           corresponds to.
%
% written by John Stout with extreme help from the old Int method

function [Int_old,Int_new] = Int_v2(datafolder,missing_data,vt_name,taskType,Int_information)

%{
load('Int_information')
datafolder = pwd;
missing_data = 'exclude';
vt_name = 'VT1.mat';
taskType = 'DA';
%}

%% pull in video tracking data
% meat
[x,y,t] = getVTdata(datafolder,missing_data,vt_name);

% number of position samples
numSamples = length(t);

%% define rectangles for all coordinates

% stem
xv_stem = [STM_fld(1)+STM_fld(3) STM_fld(1) STM_fld(1) STM_fld(1)+STM_fld(3) STM_fld(1)+STM_fld(3)];
yv_stem = [STM_fld(2) STM_fld(2) STM_fld(2)+STM_fld(4) STM_fld(2)+STM_fld(4) STM_fld(2)];

% choice point
xv_cp = [CP_fld(1)+CP_fld(3) CP_fld(1) CP_fld(1) CP_fld(1)+CP_fld(3) CP_fld(1)+CP_fld(3)];
yv_cp = [CP_fld(2) CP_fld(2) CP_fld(2)+CP_fld(4) CP_fld(2)+CP_fld(4) CP_fld(2)];

% left reward field
xv_lr = [lRW_fld(1)+lRW_fld(3) lRW_fld(1) lRW_fld(1) lRW_fld(1)+lRW_fld(3) lRW_fld(1)+lRW_fld(3)];
yv_lr = [lRW_fld(2) lRW_fld(2) lRW_fld(2)+lRW_fld(4) lRW_fld(2)+lRW_fld(4) lRW_fld(2)];

% right reward field
xv_rr = [rRW_fld(1)+rRW_fld(3) rRW_fld(1) rRW_fld(1) rRW_fld(1)+rRW_fld(3) rRW_fld(1)+rRW_fld(3)];
yv_rr = [rRW_fld(2) rRW_fld(2) rRW_fld(2)+rRW_fld(4) rRW_fld(2)+rRW_fld(4) lRW_fld(2)];

% startbox
xv_sb = [PED_fld(1)+PED_fld(3) PED_fld(1) PED_fld(1) PED_fld(1)+PED_fld(3) PED_fld(1)+PED_fld(3)];
yv_sb = [PED_fld(2) PED_fld(2) PED_fld(2)+PED_fld(4) PED_fld(2)+PED_fld(4) lRW_fld(2)];

%% identify where each sample in the position data belongs to

% stem 
[in_stem,on_stem] = inpolygon(x,y,xv_stem,yv_stem);

% choice point
[in_cp,on_cp] = inpolygon(x,y,xv_cp,yv_cp);

% left reward field 
[in_lr,on_lr] = inpolygon(x,y,xv_lr,yv_lr);

% right reward field 
[in_rr,on_rr] = inpolygon(x,y,xv_rr,yv_rr);

% startbox 
[in_sb,on_sb] = inpolygon(x,y,xv_sb,yv_sb);

%% loop across data, identify entry and exit points and get timestamps

% intialize some variables
stem_entry     = [];
cp_entry       = []; % is stem exit
goalArm_entry  = []; % is choice point exit
goalZone_entry = []; % is goal arm exit
retArm_entry   = []; % is goal field exit
startBox_entry = []; % is return arm exit
trajectory     = [];

whereWasRat = [];

if contains(taskType,[{'DA'} {'DNMP'} {'CD'} {'CDWM'}])
    for i = 2:numSamples-1

        % start with startbox
        if in_sb(i) == 1 && isempty(whereWasRat)
            %was_in_sb = 1;
            whereWasRat = 'sb';
        end

        % when should was_in_sb_now_in_stem be reset? Once the task sequence is
        % accomplished. In other words, once he was in the return arm, but is
        % now in the startbox. note that the isempty line is placed to track
        % the first sample as he couldn't have been in the ret arm and then in
        % sb
        if in_sb(i) == 0 && in_sb(i-1) == 1 && (in_stem(i) == 1 || on_stem(i) == 1) && contains(whereWasRat,'sb')
            % this is the entry timestamp
            stem_entry = [stem_entry t(i)];
            % re-assign startbox as he now was in stem
            whereWasRat = 'stem';
        end

        % if he is not on the stem, but he was previously on the stem, and he
        % is now in the choice point or on the edge of the choice point
        % boundary, and he used to be in the stem, then he's in the choice
        % point
        if in_stem(i) == 0 && in_stem(i-1) == 1 && (in_cp(i) == 1 || on_cp(i) == 1) && contains(whereWasRat,'stem')
            % this is the entry timestamp
            cp_entry = [cp_entry t(i)];
            % re-assign startbox as he now was in stem
            whereWasRat = 'cp';
        end

        % if the rat is not in the cp, is not in the stem, is not in the goal
        % fields, is not in the startbox, but his last position was in the
        % choice point
        if in_stem(i) == 0 && in_cp(i) == 0 && in_lr(i) == 0 && in_rr(i) == 0 && ...
                in_sb(i) == 0 && (in_cp(i-1) == 1 || on_cp(i-1) == 1) && contains(whereWasRat,'cp')
            % store timestamp
            goalArm_entry = [goalArm_entry t(i)];
            % tracker
            whereWasRat = 'goalArm';
        end  

        % if the rat is in the left reward field or on it, but didn't used to
        % be in the field nor on it, but his next coordinate is in it
        if (in_lr(i) == 1 || on_lr(i) == 1) && (in_lr(i-1) == 0 && on_lr(i-1) == 0) && (in_lr(i+1) == 1 || on_lr(i+1) == 1) && contains(whereWasRat,'goalArm')
            goalZone_entry = [goalZone_entry t(i)];
            trajectory = [trajectory;'L'];
            % tracker
            whereWasRat = 'goalZone';
        elseif (in_rr(i) == 1 || on_rr(i) == 1) && (in_rr(i-1) == 0 && on_rr(i-1) == 0) && (in_rr(i+1) == 1 || on_rr(i+1) == 1) && contains(whereWasRat,'goalArm')
            goalZone_entry = [goalZone_entry t(i)];
            trajectory = [trajectory;'R'];
            % tracker
            whereWasRat = 'goalZone';
        end 

        % if the rat is not in the cp, is not in the stem, is not in the goal
        % fields, is not in the startbox, but his last position was in either
        % the left or the right goal fields, and his next coordinate is in no
        % location previously covered, then hes in the return arms
        if in_stem(i) == 0 && in_cp(i) == 0 && in_lr(i) == 0 && in_rr(i) == 0 && ...
                in_sb(i) == 0 && ((in_lr(i-1) == 1 || on_lr(i-1) == 1) || (in_rr(i-1) == 1 || on_rr(i-1) == 1)) ...
                && in_stem(i+1) == 0 && in_cp(i+1) == 0 && in_lr(i+1) == 0 && in_rr(i+1) == 0 ...
                && in_sb(i+1) == 0 && contains(whereWasRat,'goalZone')
            retArm_entry = [retArm_entry t(i)];
            % tracker
            whereWasRat = 'retArm';
        end      

        % if the rat is not in the stem
        if (in_sb(i) == 1 || on_sb(i) == 1) && in_sb(i-1) == 0 && in_sb(i+1) == 1 && contains(whereWasRat,'retArm')
            startBox_entry = [startBox_entry t(i)];
            % tracker
            whereWasRat = 'sb';
        end     

    end
elseif contains(taskType,['CA'])
    for i = 2:numSamples-1

        % start with stem
        if in_stem(i) == 1 && isempty(whereWasRat)
            %was_in_sb = 1;
            whereWasRat = 'stem';
        end

        % if he is not on the stem, but he was previously on the stem, and he
        % is now in the choice point or on the edge of the choice point
        % boundary, and he used to be in the stem, then he's in the choice
        % point
        if in_stem(i) == 0 && in_stem(i-1) == 1 && (in_cp(i) == 1 || on_cp(i) == 1) && contains(whereWasRat,'stem')
            % this is the entry timestamp
            cp_entry = [cp_entry t(i)];
            % re-assign startbox as he now was in stem
            whereWasRat = 'cp';
        end

        % if the rat is not in the cp, is not in the stem, is not in the goal
        % fields, is not in the startbox, but his last position was in the
        % choice point
        if in_stem(i) == 0 && in_cp(i) == 0 && in_lr(i) == 0 && in_rr(i) == 0 && ...
                in_sb(i) == 0 && (in_cp(i-1) == 1 || on_cp(i-1) == 1) && contains(whereWasRat,'cp')
            % store timestamp
            goalArm_entry = [goalArm_entry t(i)];
            % tracker
            whereWasRat = 'goalArm';
        end  

        % if the rat is in the left reward field or on it, but didn't used to
        % be in the field nor on it, but his next coordinate is in it
        if (in_lr(i) == 1 || on_lr(i) == 1) && (in_lr(i-1) == 0 && on_lr(i-1) == 0) && (in_lr(i+1) == 1 || on_lr(i+1) == 1) && contains(whereWasRat,'goalArm')
            goalZone_entry = [goalZone_entry t(i)];
            trajectory = [trajectory;'L'];
            % tracker
            whereWasRat = 'goalZone';
        elseif (in_rr(i) == 1 || on_rr(i) == 1) && (in_rr(i-1) == 0 && on_rr(i-1) == 0) && (in_rr(i+1) == 1 || on_rr(i+1) == 1) && contains(whereWasRat,'goalArm')
            goalZone_entry = [goalZone_entry t(i)];
            trajectory = [trajectory;'R'];
            % tracker
            whereWasRat = 'goalZone';
        end 

        % if the rat is not in the cp, is not in the stem, is not in the goal
        % fields, is not in the startbox, but his last position was in either
        % the left or the right goal fields, and his next coordinate is in no
        % location previously covered, then hes in the return arms
        if in_stem(i) == 0 && in_cp(i) == 0 && in_lr(i) == 0 && in_rr(i) == 0 && ...
                in_sb(i) == 0 && ((in_lr(i-1) == 1 || on_lr(i-1) == 1) || (in_rr(i-1) == 1 || on_rr(i-1) == 1)) ...
                && in_stem(i+1) == 0 && in_cp(i+1) == 0 && in_lr(i+1) == 0 && in_rr(i+1) == 0 ...
                && in_sb(i+1) == 0 && contains(whereWasRat,'goalZone')
            retArm_entry = [retArm_entry t(i)];
            % tracker
            whereWasRat = 'retArm';
        end      

        % if the rat is not in the stem
        if (in_stem(i) == 1 || on_stem(i) == 1) && in_stem(i-1) == 0 && in_stem(i+1) == 1 && contains(whereWasRat,'retArm')
            stem_entry = [stem_entry t(i)];
            % tracker
            whereWasRat = 'stem';
        end     

    end
    
end

% create a method for CA - ie without the startbox


%% create old Int file - ie Int file from 2006-2021
Int_old = [];
% stem entry
Int_old(:,1) = stem_entry;
% cp
Int_old(:,5) = cp_entry;
% goal arm entry
Int_old(:,6) = goalArm_entry;
% goal zone entry
Int_old(:,2) = goalZone_entry;
% return arm entry
Int_old(:,7) = retArm_entry;
% startbox entry
Int_old(:,8) = startBox_entry;

% identify which t-maze task
trajectory = cellstr(trajectory);

% get index of turning behaviors
leftTurns  = find(contains(trajectory,'L'));
rightTurns = find(contains(trajectory,'R'));

% left
Int_old(leftTurns,3) = 1; 

% right
Int_old(rightTurns,3) = 0;
   
% -- create choice accuracy index -- %
if contains(taskType,[{'DA'} {'CA'}])
    
    numtrials = size(Int_old,1);
    for i = 1:numtrials-1
        if Int_old(i,3) == 1 && Int_old(i+1,3) == 0 || Int_old(i,3) == 0 && Int_old(i+1,3) == 1
            Int_old(i+1,4) = 0;
        else
            Int_old(i+1,4) = 1;
        end
    end
    percentCorrect = (((numtrials/2)-(sum(Int_old(:,4))/2))/(numtrials/2))*100;
    
elseif contains(taskType,'DNMP')
    
    numtrials = size(Int_old,1);
    choice_trials = 2:2:numtrials;
    for i = 1:size(choice_trials,2)
        if  Int_old(choice_trials(i),3) == Int_old(choice_trials(i)-1,3)
            Int_old(choice_trials(i),4)   = 1;
            Int_old(choice_trials(i)-1,4) = 1;
        end
    end
    percentCorrect = (((numtrials/2)-(sum(Int_old(:,4))/2))/(numtrials/2))*100;
    
elseif contains(taskType,[{'CD'} {'CDWM'}])
    % 
    %prompt   = ['Enter expected sequence of trials (i.e L R R L L R R L L)'];
    %expected = input(prompt,'s');
    % could also require an input as an excel sheet or matrix or something
    
    error('Code does not support this feature yet - please see ideas in code')
    
end

%% New Int file (2021)
% define some variables for the table
trajNumber = (1:length(stem_entry))';
stemEntry  = stem_entry'; 
cpEntry    = cp_entry';
gaEntry    = goalArm_entry';
gzEntry    = goalZone_entry';
retEntry   = retArm_entry';
sbEntry    = startBox_entry';
trajBinary = Int_old(:,3);

% choice accuracy
accuracy = cell([numtrials 1]);
if contains(taskType,[{'DA'} {'CA'}])
    incor  = find(Int_old(:,4) == 1);
    cor    = find(Int_old(:,4) == 0);
    accuracy(incor) = {'Incorrect'};
    accuracy(cor)   = {'Correct'};
end
accBinary = Int_old(:,4);

% create the table
Int_new = table(trajNumber,stemEntry,cpEntry,gaEntry,gzEntry,retEntry,sbEntry,trajectory,accuracy,trajBinary,accBinary);





