%% SCRIPT_getProbeLFP
%
% this script is meant as a preprocessing step to remove any signals that
% look bad
disp('This code is meant to format your probe signals and should only be used if each shank has equal number of electrodes...')
warning('If your shank does NOT have equal number of electrodes per shank, do not use this code!!!')
clear;

% interface with user - want to know how many electrode surfaces are on
% each shank
prompt = 'How many electrodes on on each shank? ';
elecPerShank = num2str(input(prompt,'s'));

% get signal
numCSC = 1:8:64; % Each shank has 8 recordings surfaces
for shanki = 1:length(numCSC)
    % define shank
    cscNames = numCSC(shanki):numCSC(shanki)+7;
    % loop over the electrodes on each shank to load them into matlab
    for ei = 1:length(cscNames)
        cscName = ['CSC',num2str(cscNames(ei))];
        try
            [lfp{shanki,ei},times,srate(shanki,ei)] = getLFPdata(pwd,cscName,'Events');
        catch
            disp(['Missing ',cscName])
            lfp{shanki,ei} = NaN;
        end
    end
    disp(['Loaded and converted signals from shank #',num2str(shanki)])
end

% the output "lfp" has shanks on rows, and electrodes on columns
numShanks     = size(lfp,1);
numElectrodes = size(lfp,2);
figure('color','w')
looper = 0;
for shanki = 1:numShanks
    for ei = 1:numElectrodes
        looper = looper+1;        
        subplot(numShanks,numElectrodes,looper)
        plot(lfp{shanki,ei})
        title(['Shank',num2str(shanki),' electrode',num2str(ei)])
        axis tight;
        ylim([-6000 6000])
        % keep track of the number of loops
    end
end

% enter which signals to remove (row/col)
data2rem = [];
for i = 1:numShanks
    % request the user to remove signals on each shank
    prompt=(['Which electrodes on shank',num2str(i), ' should be removed? ']);
    data2rem{i} = str2num(input(prompt,'s'));
end

% remove arrays by erasing them
for shanki = 1:numShanks
    for i = 1:length(data2rem{shanki})
        lfp(shanki,data2rem{shanki}(i)) = [];
    end
end

prompt=('Please enter which signals to exclude (row x col) (eg: [1,1] [3,1]) indicates to remove shank1,electrode1 and shank3,electrode1 ');
data2rem = input(prompt,'s');
data2rem = strsplit(data2rem,' ');
for i = 1:length(data2rem)
    data2rem{i} = str2num(data2rem{i});
end

    
        lfp = [];
        try [lfp{1}] = getLFPdata(pwd,csc1,'Events'); catch; lfp1 = []; end
        try [lfp{2}] = getLFPdata(pwd,csc2,'Events'); catch; lfp2 = []; end
        try [lfp{3}] = getLFPdata(pwd,csc3,'Events'); catch; lfp3 = []; end
        try [lfp{4},times,srate(i)] = getLFPdata(pwd,csc4,'Events'); catch; lfp4 = []; end
        % now visually inspect and discard any arrays that are bad
        figure('color','w')
        for lfpi = 1:length(lfp) 
            subplot(length(lfp),1,lfpi)
            plot(lfp{lfpi})
            title(['signal',num2str(lfpi)])
            axis tight;
        end
        prompt = ['Denote if any signals should be eliminated (IGNORE EMPTY ARRAYS) '];
        lfpErase = [];
        lfpErase = str2num(input(prompt,'s'));
        lfp(lfpErase)=[];
        % remove wires with no signal
        lfp = emptyCellErase(lfp);
        % concatenate to avg over probe shanks
        lfpArray{i} = vertcat(lfp{:});
        disp(['Finished creating LFP variable on array ',num2str(i)])
        %save(['shankLFP',num2str(i)]);
    catch
        disp(['Could not handle shank',num2str(i)])
    end
end

% take common average
comAvg = mean(vertcat(lfpArray{:}),1);

% subtract
for arrayi = 1:length(lfpArray)
    for ei = 1:size(lfpArray{arrayi},1)
        lfpArrayReRef{arrayi}(ei,:) = lfpArray{arrayi}(ei,:)-comAvg;
    end
end
        
info.lfpArrayReRef = 'Rereferenced by subtracting common average';
info.lfpArray = 'Data organized by electrode array on the sides of probes.';
info.processing = 'Electrodes excluded if artifacts are present or if voltage was extremely low';
save('probeLFP','lfpArray','lfpArrayReRef','srate','info');


