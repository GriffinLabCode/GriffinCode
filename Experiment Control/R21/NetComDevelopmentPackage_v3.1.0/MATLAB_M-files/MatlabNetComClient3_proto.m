function [methodinfo,structs,enuminfo,ThunkLibName]=MatlabNetComClient3_proto
%MATLABNETCOMCLIENT3_PROTO Create structures to define interfaces found in 'MatlabNetComClient'.

%This function was generated by loadlibrary.m parser version 1.1.6.34 on Wed Sep 21 08:55:40 2016
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
%  int ConnectToServer ( const char * serverName ); 
fcns.name{fcnNum}='ConnectToServer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int DisconnectFromServer (); 
fcns.name{fcnNum}='DisconnectFromServer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  char * GetClientVersionString (); 
fcns.name{fcnNum}='GetClientVersionString'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int OpenStream ( const char * objectName ); 
fcns.name{fcnNum}='OpenStream'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int CloseStream ( const char * objectName ); 
fcns.name{fcnNum}='CloseStream'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int SendCommand ( const char * command , char ** reply , int * numBytesAvailable ); 
fcns.name{fcnNum}='SendCommand'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int SetApplicationName ( const char * myApplicationName ); 
fcns.name{fcnNum}='SetApplicationName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int GetDASObjectsAndTypes ( char ** objectNames , char ** typeNames , int * pNumBytesPerString , int * pNumStrings ); 
fcns.name{fcnNum}='GetDASObjectsAndTypes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'stringPtrPtr', 'stringPtrPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  char * GetServerPCName (); 
fcns.name{fcnNum}='GetServerPCName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  char * GetServerIPAddress (); 
fcns.name{fcnNum}='GetServerIPAddress'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  char * GetServerApplicationName (); 
fcns.name{fcnNum}='GetServerApplicationName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int AreWeConnected (); 
fcns.name{fcnNum}='AreWeConnected'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int GetRecordBufferSize ( void ); 
fcns.name{fcnNum}='GetRecordBufferSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int SetRecordBufferSize ( int numRecordsToBuffer ); 
fcns.name{fcnNum}='SetRecordBufferSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int GetMaxCSCSamples ( void ); 
fcns.name{fcnNum}='GetMaxCSCSamples'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int GetSpikeSampleWindowSize ( void ); 
fcns.name{fcnNum}='GetSpikeSampleWindowSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int GetMaxSpikeFeatures ( void ); 
fcns.name{fcnNum}='GetMaxSpikeFeatures'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int GetMaxEventStringLength ( void ); 
fcns.name{fcnNum}='GetMaxEventStringLength'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int GetNewCSCData ( const char * acqEntName , __int64 * timeStamps , int * channelNumbers , int * samplingFrequency , int * numValidSamples , short * samples , int * numRecordsReturned , int * numDroppedRecords ); 
fcns.name{fcnNum}='GetNewCSCData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int64Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int16Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int GetNewSEData ( const char * acqEntName , __int64 * timeStamps , int * scNumbers , int * cellNumbers , int * featureValues , short * samples , int * numRecordsReturned , int * numDroppedRecords ); 
fcns.name{fcnNum}='GetNewSEData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int64Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int16Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int GetNewSTData ( const char * acqEntName , __int64 * timeStamps , int * scNumbers , int * cellNumbers , int * featureValues , short * samples , int * numRecordsReturned , int * numDroppedRecords ); 
fcns.name{fcnNum}='GetNewSTData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int64Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int16Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int GetNewTTData ( const char * acqEntName , __int64 * timeStamps , int * scNumbers , int * cellNumbers , int * featureValues , short * samples , int * numRecordsReturned , int * numDroppedRecords ); 
fcns.name{fcnNum}='GetNewTTData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int64Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int16Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int GetNewEventData ( const char * acqEntName , __int64 * timeStamps , int * eventIDs , int * ttlValues , char ** eventStrings , int * numRecordsReturned , int * numDroppedRecords ); 
fcns.name{fcnNum}='GetNewEventData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int64Ptr', 'int32Ptr', 'int32Ptr', 'stringPtrPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int GetNewVTData ( const char * acqEntName , __int64 * timeStamps , int * extractedLocations , int * extractedAngles , int * numRecordsReturned , int * numDroppedRecords ); 
fcns.name{fcnNum}='GetNewVTData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int64Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
methodinfo=fcns;